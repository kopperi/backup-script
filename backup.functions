#!/bin/bash
set -e

#################################################################
############################ FUNCTIONS ##########################
#################################################################
#								#
#	This file includes functions for backup script. 	#
# 		Modify at will but be careful.			#
# 								#
# ###############################################################

#Function to mount appropriate drive for backup
function enter_volume() { 
	echo -n "Checking device availability."
	#Check if already mounted. If yes, inform and continue.
	if $mount | $grep $mount_label | $grep $mount_point > /dev/null; then
		echo -n "Already mounted."; echo -e '\t'"[OK]"; 
		return 0
	#Check if defined drive exists in system. If yes, open volume and mount. 
	#Continue on success.
	elif $lsblk | $grep $drive > /dev/null; then 
		echo -e '\t'"[OK]";  
		#Check, if the drive in question is and encrypted volume before
		#opening it.
		if $lsblk --fs | grep $drive | grep 'crypto_LUKS' > /dev/null; then
			#Check whether the volume is already open. 
			if $lsblk --fs | grep $mount_label > /dev/null; then
				echo -n " Volume already open, mounting."
				$mount /dev/mapper/$mount_label $mount_point && \ 
				echo -e '\t'"[OK]";
				return 0
			#If not open yet, open and mount.
			else
				echo "Encrypted volume found, opening."
				$cryptsetup open --type luks /dev/$drive $mount_label 
				echo -n "Mounting."
				$mount /dev/mapper/$mount_label $mount_point && \
				echo -e '\t' "[OK]";
				return 0
			fi
		#If there is no crypto_LUKS label with appropriate drive label,
		#volume is either unaencrypted or not supported. Attempt to mount.	
		else 
			echo -n "Volume is not encrypted, mounting."
		 	$mount /dev/$drive $mount_point && echo -e '\t'"[OK]";
		        return 0
		fi
	#If target drive does not exist, inform and exit with error.
	else 
		echo "Defined drive /dev/$drive cannot be found in system. Please check"\
		"the configuration. Exiting script."	
		exit 1;
	fi
}

#Funtion to provide user and option to keep volume mounted after script is completed 
#(e.g. to inspect folders with file manager). Includes timeout, after which volume is
#automatically unmounted without user action. Timeout can be specified in the beginning
#of the script under Miscallaneous options.
function exit_dialogue() {
       	read -t $timeout -p "Do you want to unmount volume? (Y/n)" choice || unmount_volume;
	if [[ $choice == "n"  ]]; then
		echo "Leaving /dev/$drive mounted. Exiting script."
		exit 0
	else  
		unmount_volume;
	fi
	
}

#Function to unmount encrypted volume and close it.
function unmount_volume() {
	echo -n $'\n'"Unmounting $drive from $mount_point."
	cd; $umount $mount_point && echo -e '\t'"[OK]";
	#If volume is encrypted volume, close it.
	if $lsblk --fs | grep $drive | grep 'crypto_LUKS' > /dev/null; then 
		echo -n "Closing encrypted volume."
		$cryptsetup close $mount_label && echo -e '\t'"[OK]"
	fi	
	echo "Backup successful, exiting."
	exit 0
}

#Mirror backup. This function makes and exact copy of current files. All files which do 
#not match the current selection of files in directories defined in --files-from will be 
#deleted. This backup uses separate folder, labeled 'backup_mirror'
function backup_mirror() {
	enter_volume;
	#Check whether there is already a folder. Create the folder, if not found.
	if [[ ! -d $backup_dir_mirr ]]; then
		echo -n  "Creating directory."
	        $mkdir $backup_dir_mirr && echo -e '\t'"[OK]";
       	fi 	       
	
	#Perform backup. "True" in the end will allow script to continue even when rsync 
	#gives errors (such as inaccessible files).
	echo "Backing up."
	$rsync $flags_mirr --exclude-from=$exclude --files-from=$include / $backup_dir_mirr \
	--log-file=$log_file_mirr || true;
	echo "Transfer completed successfully."
	exit_dialogue;	#After backup proceed to exit dialogue.
}

#Incremental backup. This function uses the same backup folder every time, adding
#to the files which are already in the folder. Files with same names are updated to
#newer versions and files with no matches in current system are retained as well.
#Separate folder is used, labeled as 'backup_incremental'

function backup_incremental() {
	enter_volume;
	#Check whether there is already a folder. Create the folder, if not found.
	if [[ ! -d $backup_dir_incr ]]; then
		echo -n "Creating directory."
	        $mkdir $backup_dir_incr && echo -e '\t'"[OK]";
       	fi 	       
	
	#Perform backup. "True" in the end will allow script to continue even when rsync
       	#returns errors (such aseinaccessible files).
	echo "Backing up."
	$rsync $flags_incr --exclude-from=$exclude --files-from=$include / $backup_dir_incr \
	--log-file=$log_file_incr || true;
	echo "Transfer completed successfully."
	exit_dialogue;	#After backup proceed to exit dialogue.
}



#Full backup. This function creates new folder to defined backup directory with date label. 
#If folder already exists (i.e. manually created or full backup has already been done today), 
#script asks whether to:
#1. Update the existing backup with any changes that may have been introduced after last update (u)
#2. Quit script (nothing will be changed)
#3. Remove old backup and recreate full backup. CAREFUL

function backup_full() {
	enter_volume;	
	#Check whether there is already a folder. Create the folder, if not found.
	if [[ ! -d $backup_dir_full ]]; then
		echo -n "Creating directory.   "
		$mkdir $backup_dir_full && echo -e '\t'"[OK]"; 
	#If defined folder already exists, user is given options.	
	else
		echo -n "Defined folder already exist. Want to (u)pdate backup" \
		"(same than incremental), (q)uit or (re)move and recreate (u/Q/re): "
		read choice;
		#When update is selected, perform mirror backup on existing full backup.
		#I.e. all changes to files will be updated.
		if [[ $choice == "u" ]]; then
			echo Update chosen.

		#If user chooses the remove option, additional confirmation required to proceed. 
		elif [[ $choice == "re"  ]]; then
			read -p "Absolutely sure? Type 'remove' in capital letters to proceed: " \
			confirmation;
				#If confirmation is successful, remove folder
				if [[ $confirmation == "REMOVE" ]]; then
					echo -n "Removing old backup $backup_dir_full"; 
					$rm -rf $backup_dir_full && echo -e '\t'"[OK]";
					echo -n "Recreating folder"; $mkdir $backup_dir_full;
					echo -e '/t'"[OK)";
				else
					echo "Required input not provided, aborting."
					exit_dialogue;
				fi 

		#Abort with any other input, including 'q'. 
	        else
		       echo "Aborting by user decision."
		       cd && exit_dialogue;
	        fi
	fi

	#Perform backup. "True" in the end will allow script to continue even when rsync
       	#returns errors (such as inaccessible files).
	echo "Backing up."
	$rsync $flags_full --exclude-from=$exclude --files-from=$include / $backup_dir_full \
	--log-file=$log_file_full ||Â true;
	echo "Transfer completed successfully.";
	exit_dialogue;	
}
